/*
 * This file is generated by jOOQ.
*/
package ORM;


import ORM.tables.Article;
import ORM.tables.Attachment;
import ORM.tables.Comment;
import ORM.tables.FollowRelation;
import ORM.tables.User;
import ORM.tables.records.ArticleRecord;
import ORM.tables.records.AttachmentRecord;
import ORM.tables.records.CommentRecord;
import ORM.tables.records.FollowRelationRecord;
import ORM.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>mallard_dev</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<ArticleRecord, Integer> IDENTITY_ARTICLE = Identities0.IDENTITY_ARTICLE;
    public static final Identity<AttachmentRecord, Integer> IDENTITY_ATTACHMENT = Identities0.IDENTITY_ATTACHMENT;
    public static final Identity<CommentRecord, Integer> IDENTITY_COMMENT = Identities0.IDENTITY_COMMENT;
    public static final Identity<FollowRelationRecord, Integer> IDENTITY_FOLLOW_RELATION = Identities0.IDENTITY_FOLLOW_RELATION;
    public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ArticleRecord> KEY_ARTICLE_PRIMARY = UniqueKeys0.KEY_ARTICLE_PRIMARY;
    public static final UniqueKey<AttachmentRecord> KEY_ATTACHMENT_PRIMARY = UniqueKeys0.KEY_ATTACHMENT_PRIMARY;
    public static final UniqueKey<CommentRecord> KEY_COMMENT_PRIMARY = UniqueKeys0.KEY_COMMENT_PRIMARY;
    public static final UniqueKey<FollowRelationRecord> KEY_FOLLOW_RELATION_PRIMARY = UniqueKeys0.KEY_FOLLOW_RELATION_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_USER_USER_NAME_UINDEX = UniqueKeys0.KEY_USER_USER_USER_NAME_UINDEX;
    public static final UniqueKey<UserRecord> KEY_USER_USER_EMAIL_UINDEX = UniqueKeys0.KEY_USER_USER_EMAIL_UINDEX;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ArticleRecord, UserRecord> ARTICLE_USER_ID_FK = ForeignKeys0.ARTICLE_USER_ID_FK;
    public static final ForeignKey<AttachmentRecord, ArticleRecord> ATTACHMENT_ARTICLE_ID_FK = ForeignKeys0.ATTACHMENT_ARTICLE_ID_FK;
    public static final ForeignKey<AttachmentRecord, CommentRecord> ATTACHMENT_COMMENT_ID_FK = ForeignKeys0.ATTACHMENT_COMMENT_ID_FK;
    public static final ForeignKey<AttachmentRecord, UserRecord> ATTACHMENT_USER_ID_FK = ForeignKeys0.ATTACHMENT_USER_ID_FK;
    public static final ForeignKey<CommentRecord, UserRecord> COMMENT_USER_ID_FK = ForeignKeys0.COMMENT_USER_ID_FK;
    public static final ForeignKey<CommentRecord, ArticleRecord> COMMENT_ARTICLE_ID_FK = ForeignKeys0.COMMENT_ARTICLE_ID_FK;
    public static final ForeignKey<CommentRecord, CommentRecord> COMMENT_COMMENT_ID_FK = ForeignKeys0.COMMENT_COMMENT_ID_FK;
    public static final ForeignKey<FollowRelationRecord, UserRecord> FOLLOW_RELATION_FOLLOWED_ID_FK = ForeignKeys0.FOLLOW_RELATION_FOLLOWED_ID_FK;
    public static final ForeignKey<FollowRelationRecord, UserRecord> FOLLOW_RELATION_USER_ID_FK = ForeignKeys0.FOLLOW_RELATION_USER_ID_FK;
    public static final ForeignKey<FollowRelationRecord, UserRecord> FOLLOW_RELATION_FOLLOWING_ID_FK = ForeignKeys0.FOLLOW_RELATION_FOLLOWING_ID_FK;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<ArticleRecord, Integer> IDENTITY_ARTICLE = createIdentity(Article.ARTICLE, Article.ARTICLE.ID);
        public static Identity<AttachmentRecord, Integer> IDENTITY_ATTACHMENT = createIdentity(Attachment.ATTACHMENT, Attachment.ATTACHMENT.ID);
        public static Identity<CommentRecord, Integer> IDENTITY_COMMENT = createIdentity(Comment.COMMENT, Comment.COMMENT.ID);
        public static Identity<FollowRelationRecord, Integer> IDENTITY_FOLLOW_RELATION = createIdentity(FollowRelation.FOLLOW_RELATION, FollowRelation.FOLLOW_RELATION.ID);
        public static Identity<UserRecord, Integer> IDENTITY_USER = createIdentity(User.USER, User.USER.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<ArticleRecord> KEY_ARTICLE_PRIMARY = createUniqueKey(Article.ARTICLE, "KEY_article_PRIMARY", Article.ARTICLE.ID);
        public static final UniqueKey<AttachmentRecord> KEY_ATTACHMENT_PRIMARY = createUniqueKey(Attachment.ATTACHMENT, "KEY_attachment_PRIMARY", Attachment.ATTACHMENT.ID);
        public static final UniqueKey<CommentRecord> KEY_COMMENT_PRIMARY = createUniqueKey(Comment.COMMENT, "KEY_comment_PRIMARY", Comment.COMMENT.ID);
        public static final UniqueKey<FollowRelationRecord> KEY_FOLLOW_RELATION_PRIMARY = createUniqueKey(FollowRelation.FOLLOW_RELATION, "KEY_follow_relation_PRIMARY", FollowRelation.FOLLOW_RELATION.ID);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.ID);
        public static final UniqueKey<UserRecord> KEY_USER_USER_USER_NAME_UINDEX = createUniqueKey(User.USER, "KEY_user_user_user_name_uindex", User.USER.USER_NAME);
        public static final UniqueKey<UserRecord> KEY_USER_USER_EMAIL_UINDEX = createUniqueKey(User.USER, "KEY_user_user_email_uindex", User.USER.EMAIL);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<ArticleRecord, UserRecord> ARTICLE_USER_ID_FK = createForeignKey(ORM.Keys.KEY_USER_PRIMARY, Article.ARTICLE, "article_user_id_fk", Article.ARTICLE.AUTHOR);
        public static final ForeignKey<AttachmentRecord, ArticleRecord> ATTACHMENT_ARTICLE_ID_FK = createForeignKey(ORM.Keys.KEY_ARTICLE_PRIMARY, Attachment.ATTACHMENT, "attachment_article_id_fk", Attachment.ATTACHMENT.OWNBY);
        public static final ForeignKey<AttachmentRecord, CommentRecord> ATTACHMENT_COMMENT_ID_FK = createForeignKey(ORM.Keys.KEY_COMMENT_PRIMARY, Attachment.ATTACHMENT, "attachment_comment_id_fk", Attachment.ATTACHMENT.OWNBY);
        public static final ForeignKey<AttachmentRecord, UserRecord> ATTACHMENT_USER_ID_FK = createForeignKey(ORM.Keys.KEY_USER_PRIMARY, Attachment.ATTACHMENT, "attachment_user_id_fk", Attachment.ATTACHMENT.OWNBY);
        public static final ForeignKey<CommentRecord, UserRecord> COMMENT_USER_ID_FK = createForeignKey(ORM.Keys.KEY_USER_PRIMARY, Comment.COMMENT, "comment_user_id_fk", Comment.COMMENT.COMMENTER);
        public static final ForeignKey<CommentRecord, ArticleRecord> COMMENT_ARTICLE_ID_FK = createForeignKey(ORM.Keys.KEY_ARTICLE_PRIMARY, Comment.COMMENT, "comment_article_id_fk", Comment.COMMENT.PARENT_ARTICLE);
        public static final ForeignKey<CommentRecord, CommentRecord> COMMENT_COMMENT_ID_FK = createForeignKey(ORM.Keys.KEY_COMMENT_PRIMARY, Comment.COMMENT, "comment_comment_id_fk", Comment.COMMENT.PARENT_COMMENT);
        public static final ForeignKey<FollowRelationRecord, UserRecord> FOLLOW_RELATION_FOLLOWED_ID_FK = createForeignKey(ORM.Keys.KEY_USER_PRIMARY, FollowRelation.FOLLOW_RELATION, "follow_relation_followed_id_fk", FollowRelation.FOLLOW_RELATION.FOLLOWEE);
        public static final ForeignKey<FollowRelationRecord, UserRecord> FOLLOW_RELATION_USER_ID_FK = createForeignKey(ORM.Keys.KEY_USER_PRIMARY, FollowRelation.FOLLOW_RELATION, "follow_relation_user_id_fk", FollowRelation.FOLLOW_RELATION.FOLLOWEE);
        public static final ForeignKey<FollowRelationRecord, UserRecord> FOLLOW_RELATION_FOLLOWING_ID_FK = createForeignKey(ORM.Keys.KEY_USER_PRIMARY, FollowRelation.FOLLOW_RELATION, "follow_relation_following_id_fk", FollowRelation.FOLLOW_RELATION.FOLLOWER);
    }
}
