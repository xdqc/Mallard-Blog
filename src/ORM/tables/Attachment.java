/*
 * This file is generated by jOOQ.
*/
package ORM.tables;


import ORM.Indexes;
import ORM.Keys;
import ORM.MallardDev;
import ORM.tables.records.AttachmentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attachment extends TableImpl<AttachmentRecord> {

    private static final long serialVersionUID = -1458580323;

    /**
     * The reference instance of <code>mallard_dev.attachment</code>
     */
    public static final Attachment ATTACHMENT = new Attachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttachmentRecord> getRecordType() {
        return AttachmentRecord.class;
    }

    /**
     * The column <code>mallard_dev.attachment.id</code>.
     */
    public final TableField<AttachmentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mallard_dev.attachment.filename</code>.
     */
    public final TableField<AttachmentRecord, String> FILENAME = createField("filename", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>mallard_dev.attachment.path</code>.
     */
    public final TableField<AttachmentRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>mallard_dev.attachment.mime</code>.
     */
    public final TableField<AttachmentRecord, String> MIME = createField("mime", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>mallard_dev.attachment.attach_type</code>.
     */
    public final TableField<AttachmentRecord, String> ATTACH_TYPE = createField("attach_type", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>mallard_dev.attachment.ownby</code>.
     */
    public final TableField<AttachmentRecord, Integer> OWNBY = createField("ownby", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mallard_dev.attachment.isActivate</code>.
     */
    public final TableField<AttachmentRecord, Byte> ISACTIVATE = createField("isActivate", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>mallard_dev.attachment</code> table reference
     */
    public Attachment() {
        this(DSL.name("attachment"), null);
    }

    /**
     * Create an aliased <code>mallard_dev.attachment</code> table reference
     */
    public Attachment(String alias) {
        this(DSL.name(alias), ATTACHMENT);
    }

    /**
     * Create an aliased <code>mallard_dev.attachment</code> table reference
     */
    public Attachment(Name alias) {
        this(alias, ATTACHMENT);
    }

    private Attachment(Name alias, Table<AttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attachment(Name alias, Table<AttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MallardDev.MALLARD_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ATTACHMENT_ATTACHMENT_COMMENT_ID_FK, Indexes.ATTACHMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AttachmentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ATTACHMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AttachmentRecord> getPrimaryKey() {
        return Keys.KEY_ATTACHMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AttachmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AttachmentRecord>>asList(Keys.KEY_ATTACHMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AttachmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AttachmentRecord, ?>>asList(Keys.ATTACHMENT_ARTICLE_ID_FK, Keys.ATTACHMENT_COMMENT_ID_FK, Keys.ATTACHMENT_USER_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Attachment as(String alias) {
        return new Attachment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Attachment as(Name alias) {
        return new Attachment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(String name) {
        return new Attachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(Name name) {
        return new Attachment(name, null);
    }
}
