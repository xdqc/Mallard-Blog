/*
 * This file is generated by jOOQ.
*/
package ORM.tables;


import ORM.Indexes;
import ORM.Keys;
import ORM.MallardDev;
import ORM.tables.records.CommentRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = 419279490;

    /**
     * The reference instance of <code>mallard_dev.comment</code>
     */
    public static final Comment COMMENT = new Comment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>mallard_dev.comment.id</code>.
     */
    public final TableField<CommentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mallard_dev.comment.content</code>.
     */
    public final TableField<CommentRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>mallard_dev.comment.commenter</code>.
     */
    public final TableField<CommentRecord, Integer> COMMENTER = createField("commenter", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mallard_dev.comment.create_time</code>.
     */
    public final TableField<CommentRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>mallard_dev.comment.edit_time</code>.
     */
    public final TableField<CommentRecord, Timestamp> EDIT_TIME = createField("edit_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mallard_dev.comment.abuse_num</code>.
     */
    public final TableField<CommentRecord, Integer> ABUSE_NUM = createField("abuse_num", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mallard_dev.comment.parent_article</code>.
     */
    public final TableField<CommentRecord, Integer> PARENT_ARTICLE = createField("parent_article", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mallard_dev.comment.parent_comment</code>.
     */
    public final TableField<CommentRecord, Integer> PARENT_COMMENT = createField("parent_comment", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mallard_dev.comment.show_hide_status</code>.
     */
    public final TableField<CommentRecord, Byte> SHOW_HIDE_STATUS = createField("show_hide_status", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>mallard_dev.comment</code> table reference
     */
    public Comment() {
        this(DSL.name("comment"), null);
    }

    /**
     * Create an aliased <code>mallard_dev.comment</code> table reference
     */
    public Comment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>mallard_dev.comment</code> table reference
     */
    public Comment(Name alias) {
        this(alias, COMMENT);
    }

    private Comment(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MallardDev.MALLARD_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMENT_COMMENT_ARTICLE_ID_FK, Indexes.COMMENT_COMMENT_COMMENT_ID_FK, Indexes.COMMENT_COMMENT_USER_ID_FK, Indexes.COMMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CommentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.KEY_COMMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CommentRecord>> getKeys() {
        return Arrays.<UniqueKey<CommentRecord>>asList(Keys.KEY_COMMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CommentRecord, ?>>asList(Keys.COMMENT_USER_ID_FK, Keys.COMMENT_ARTICLE_ID_FK, Keys.COMMENT_COMMENT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Comment as(String alias) {
        return new Comment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Comment as(Name alias) {
        return new Comment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(String name) {
        return new Comment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Name name) {
        return new Comment(name, null);
    }
}
